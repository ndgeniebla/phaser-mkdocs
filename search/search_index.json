{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Hello and Welcome to PhaserFirst! By following this documentation, you will learn how to create a small Phaser project and kick off your game development journey. Throughout the document we will guide you step by step towards creating a simple version of the classic video game Pong with the goal of understanding the fundamentals of what makes up a Phaser project.</p> <p>Phaser.js (more commonly known as Phaser) is a free open-source framework for developing web based 2D games. Phaser provides a pre-defined project structure and many tools to build the game you want.</p>"},{"location":"#intended-users","title":"Intended Users","text":"<p>This documentation is intended for:</p> <ul> <li>intermediate JavaScript developers who want to learn the basics of the Phaser framework</li> </ul>"},{"location":"#prerequisite-knowledge","title":"Prerequisite Knowledge","text":"<p>This document assumes you know the following:</p> <ul> <li>Experience using JavaScript to build web based applications</li> <li>Basic knowledge of HTML</li> <li>Using the terminal to navigate projects and execute commands</li> <li>Comfortable using a code editor (like Visual Studio Code)</li> </ul> <p>For our tutorial we will be using Visual Studio Code (VSCode). Be aware that while using another code editor is possible, instructions and methods may not work for them. If you choose not to use VScode, this tutorial may not work for you.</p>"},{"location":"#software-requirements","title":"Software Requirements","text":"<ul> <li>Firefox</li> <li>Visual Studio Code</li> </ul>"},{"location":"#procedures-overview","title":"Procedures Overview","text":"<p>The instruction sets below are an overview of creating a basic Pong game using Phaser 3.</p> <ol> <li>Setting up a Basic Phaser Project</li> <li>Pong: Creating and Configuring Our Game Instance </li> <li>Pong: Creating Our First Game Objects and Player Characters</li> <li>Pong: Adding Win Conditions, Match Resetting, and Scoring System</li> </ol>"},{"location":"#typographical-conventions","title":"Typographical Conventions","text":"<ol> <li>File names will be formatted like: <code>filename.js</code></li> <li> <p>In code blocks, if you see <code>//...</code> it means there is code in that location not currently relevant to this step:</p> <pre><code>function f() {\n    //...\n    //code above is irrelevant\n\n    const relevantCode = \"goes here\";\n\n    //code below is irrelevant\n    //...\n}\n</code></pre> </li> <li> <p>Commands that are to be run inside of the terminal/command prompt will be formatted like: </p> <p>$ <code>command to be run</code></p> </li> <li> <p>JavaScript variables and their values will be formatted in inline code blocks, e.g: </p> <p>\"We will set <code>variableName</code> to <code>variableValue</code> because ...\"</p> </li> <li> <p>General actions in the operating system, navigating/clicking user interface elements in a program, and folder names are bolded, like so:</p> <p>File &gt; New File, Open in Terminal, Folder Name</p> </li> </ol>"},{"location":"#notes-and-warning-messages","title":"Notes and Warning Messages","text":"<p>Throughout this Documentation you will see message blocks that denote important information. Each message block will indicate important information that while not part of the instructions, are important in ensuring you do not run into any obstacles along the way. See below for examples of the message blocks that will be used in this documentation.</p> <p>Danger</p> <p>This message block will warn you of dangerous, common mistakes. If you run into an issue, take a look at this message block! </p> <p>Warning</p> <p>This message block will warn you to be aware of certain things for the next instruction. If you find your project not working as expected, take a look at this message block!</p> <p>Information</p> <p>This message block will mention information that while not necessary for your project, are interesting tidbits that can help expand your understanding. If you're looking for a more in depth understanding, take a look at this message block!</p> <p>Experiment</p> <p>This message block will mention small experiments/alterations you can try with your project that will help expand your understanding of phaser.js without going in-depth into other topics. If you are looking to experiment with other ways you can use phaser, take a look at this message block!</p> <p>Success</p> <p>This message block will mention what state your project should be in when you reach it. If you are looking to make sure your project is in the right state, take a look at this message block!</p> <p>Code</p> <p>This message block will contain the final code in a given section, and will usually be a collapsible block. You can copy the code inside and paste it into your code editor if you are having trouble getting it all working!</p>"},{"location":"#credits","title":"Credits","text":"<p>This documentation is based off of a video created by LogRocket: How to build pong with Phaser3</p> <p>The code we built upon is from the phaser3-pong repository maintained by Brady Dowling. We modified the code to include the Scoring System and Match Resetting feature that is covered in the Adding Win Conditions, Match Resetting, and Scoring System instruction set.</p>"},{"location":"01-setting-up/","title":"Setting up a Basic Phaser Project","text":""},{"location":"01-setting-up/#prerequisites","title":"Prerequisites","text":"<ul> <li>Know how to run commands in Command Prompt.</li> <li>Have VS Code installed.</li> <li>Have firefox installed.</li> </ul>"},{"location":"01-setting-up/#overview","title":"Overview","text":"<p>In this first part of creating a version of Pong using Phaser 3, we will be setting up a basic project with all the starter files ready for development. We will also briefly cover installing and using the Live Server extension in VS Code for developing web apps.</p>"},{"location":"01-setting-up/#setting-up-the-project","title":"Setting up the Project","text":"<ol> <li> <p>Navigate to a directory where you want to have your game project stored, e.g. a \"Projects\" folder or a \"Games\" folder.</p> <p>Note</p> <p>The following steps will create a new folder with the game files inside of the directory you navigated into, so there's no need to create a folder for the project itself.</p> </li> <li> <p>Right-click on an empty space in the directory and click Open Command Prompt or Open in Terminal.</p> </li> <li> <p>With Command Prompt open, copy and paste the following command into it and press Enter:</p> <p>$ <code>git clone https://github.com/ndgeniebla/phaser-pong-starter.git</code></p> <p>This will create a new directory named <code>phaser-pong-starter</code> with all of the starter files inside of it.</p> <p>What does <code>git clone</code> do?</p> <p><code>git clone</code> is a command in <code>git</code> that takes a remote repository (i.e. those that are hosted in places like GitHub or GitLab) and creates a clone of it on your computer. This command makes it easy to get existing code from the Internet and make modifications to it.</p> </li> <li> <p>Open Visual Studio Code (VS Code).</p> </li> <li>Go to File &gt; Open Folder and select the newly created <code>phaser-pong-starter</code> folder.</li> </ol> <p>Project Repository</p> <p>The contents of the project directory should look like this once opened in VS Code: <pre><code>|-- phaser-pong-starter           # Root Directory\n        |-- assets/               # Game Assets (Storing Sprites and Audio Files)\n        |   |-- images            # Sprite Images\n        |   |   |-- ball.png       \n        |   |   |-- paddle.png    \n        |-- src/                  # Source Code\n        |   |-- game.js           # Main JavaScript File\n        |-- lib/                  # Downloaded Libraries\n        |   |-- phaser.d.ts       # Types for Phaser\n        |   |-- phaser.min.js     # Minified version of the Phaser 3 Library\n        |-- index.html            # Static Web page\n</code></pre></p>"},{"location":"01-setting-up/#installing-live-server-extension","title":"Installing Live Server Extension","text":"<p>Note</p> <p>If you already have the Live Server extension installed, you can skip this section and move onto the next one.</p> <p>The Live Server extension for VS Code is a useful tool that allows web developers to host a static site locally on their computer. When any modifications are made to the web app's code, the live server will automatically refresh, showing your new changes immediately in the browser.</p> <p>This extension will be very useful when developing the Pong game and other web projects, so we recommend installing it to streamline your workflow as a web developer.</p> <ol> <li>With VS Code open, press Ctrl+Shift+X or use the Navigation Bar on the very left to view Extensions.</li> <li>Search for \"Live Server\" using the search bar at the top.</li> <li> <p>In the search results, click on the Live Server extension, authored by Ritwick Dey.</p> <p>Correct Extension</p> <p>If the page for the extension matches the image shown below, you have selected the correct Live Server extension.</p> <p></p> </li> <li> <p>Click on the Install button.</p> </li> </ol> <p>Extension Successfully Installed</p> <p>You will know if the Live Server extension was installed correctly if you can see the Go Live button at the bottom right of your VS Code window.</p>"},{"location":"01-setting-up/#starting-the-live-server","title":"Starting the Live Server","text":"<p>With the Live Server extension now installed, we can now move onto running our project in the browser.</p> <ol> <li>With VS Code still open, navigate back to the Project Explorer by pressing Ctrl+Shift+E or by using the navigation bar on the left side of the window.</li> <li>Click on the Go Live button at the bottom right of the VS Code window.</li> </ol> <p>Viewing the Live Server</p> <p>If a new browser window does not open after clicking Go Live button, you should see \"Port: XXXX\" in place of where the button is, with XXXX being the port number. With this, you can open a browser window and type in `localhost:XXXX' or '127.0.0.1:XXXX' for the URL and you should see the web page for your Phaser app.</p> <p>Web App Launched</p> <p>The web app is working properly if you see a white page with the heading \"Pong using Phaser 3\" on it, as seen below:</p> <p></p>"},{"location":"01-setting-up/#conclusion","title":"Conclusion","text":"<p>At the end of this section, you will have done and learned the following:</p> <ul> <li>Cloned and set up the base project folder to start working on a new Phaser game.</li> <li>Installing and running the Live Server extension in VS Code for development.</li> </ul> <p>Well done! We can now move to the next step:</p> <p>Creating and Configuring Our Game Instance</p>"},{"location":"02-configuring-creating-game-instance/","title":"Pong: Creating and Configuring Our Game Instance","text":""},{"location":"02-configuring-creating-game-instance/#prerequisites","title":"Prerequisites","text":"<ol> <li>Have the Live Server extension installed on VSCode.</li> <li>Cloned the Git Repository containing the project starter files.</li> </ol>"},{"location":"02-configuring-creating-game-instance/#overview","title":"Overview","text":"<p>In this section of creating Pong, we will cover how to configure a basic Phaser game instance, learn how to create and launch a Phaser game instance, and declaring the functions for a new scene for further development. </p>"},{"location":"02-configuring-creating-game-instance/#configuring-the-game-instance","title":"Configuring the Game Instance","text":"<p>Before creating a Phaser game instance, we have to configure it first. All the options for the configuration can be found inside Phaser's Official Documentation, though we will only use a handful of these options in this simple Pong project.</p> <ol> <li>With VSCode open, navigate to the src folder and open the empty <code>game.js</code> file.</li> <li>At the start of the file, create an empty <code>config</code> object: game.js<pre><code>const config = {\n\n};\n</code></pre></li> <li> <p>Add inside of the <code>config</code> object the <code>type</code> attribute with a value of <code>Phaser.AUTO</code>: game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n};\n</code></pre></p> <ol> <li>The <code>type</code> attribute tells Phaser to use either WebGL or Canvas to render its graphics. Setting it to <code>Phaser.AUTO</code> tells Phaser to use WebGL by default.</li> </ol> </li> <li> <p>Add the <code>parent</code> attribute to the <code>config</code> object with a value of <code>'game'</code>: game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n};\n</code></pre></p> <p>Warning</p> <p>Remember to add commas at the end of each key-value pair inside of the <code>config</code> object.</p> <p>The <code>parent</code> attribute tells Phaser the HTML ID of the HTML element that the game will be injected into. We will set that up in the next step.</p> </li> <li> <p>Navigate to the root of the directory and open <code>index.html</code> in VSCode.</p> </li> <li> <p>Inside of the body tag in the HTML, create a <code>div</code> with an ID of <code>game</code>, to match the value given to the <code>parent</code> attribute in the <code>config</code> object: index.html<pre><code>&lt;body&gt;\n  &lt;h1&gt;Pong using Phaser 3&lt;/h1&gt;\n  &lt;noscript&gt;You need to enable JavaScript to run this app.&lt;/noscript&gt;\n  &lt;div id=\"game\"&gt;&lt;/div&gt;\n  &lt;script src=\"./lib/phaser.min.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"./src/game.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> Now that Phaser knows where to inject the game in the HTML file, we can go back to configuring our Phaser game.</p> </li> <li> <p>Return to editing the <code>game.js</code> file in VSCode.</p> </li> <li> <p>Add the <code>width</code> and <code>height</code> attributes to the <code>config</code> object, with <code>width</code> having a value of <code>800</code> and the <code>height</code> having a value of <code>640</code>. game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n};\n</code></pre></p> <ol> <li>The <code>width</code> and <code>height</code> attributes define the resolution of the Phaser game when rendered in the browser.</li> </ol> </li> <li> <p>Insert the following <code>scale</code> object into <code>config</code>, with the <code>mode</code> and <code>autoCenter</code> attributes and their values: game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    }\n};\n</code></pre> The <code>scale</code> object with the given attributes tells Phaser to:</p> <ol> <li>Resize the game screen to fit the space of its parent HTML element, regardless of aspect ratio.</li> <li>Render the game screen in the center of the window.</li> </ol> <p>Phaser Attributes are Case Sensitive</p> <p>All attributes that are part of the <code>Phaser</code> object are case-sensitive. In this case, the \"scale\" in <code>Phaser.Scale</code> has to start with an uppercase letter. Getting the scale attribute with <code>Phaser.scale</code> (scale with a lowercase 's') will not work.</p> </li> <li> <p>Insert the <code>physics</code> object into <code>config</code>, with the <code>default</code> and <code>arcade</code> attributes and their values: game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: false\n        }\n    }\n};\n</code></pre> The inserted <code>physics</code> object tells Phaser to:</p> <ol> <li>Set the physics engine to Arcade. Other engines include Matter and Impact, but Arcade is the most commonly used.</li> <li>Sets the Arcade engine's gravity to false, as Pong doesn't use gravity in its gameplay.</li> </ol> </li> </ol>"},{"location":"02-configuring-creating-game-instance/#creating-and-starting-the-game-instance","title":"Creating and Starting the Game Instance","text":"<p>After creating the basic configuration for our game, we can now create a Phaser game instance, add our configuration to it, and finally see it run in the browser.</p> <ol> <li> <p>Create a new <code>Phaser.Game</code> instance by adding the code below, after the <code>config</code> object definition: game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: false\n        }\n    }\n};\n\nconst game = new Phaser.Game(config);\n</code></pre></p> </li> <li> <p>At the bottom-right of the VSCode window, click Go Live to start up the live server for the Phaser app.</p> </li> </ol> <p>Success</p> <p>Once the live server has started, you should see a black screen in the center of the browser window. This means that Phaser has properly loaded the game instance.</p> <p></p>"},{"location":"02-configuring-creating-game-instance/#declaring-a-scene","title":"Declaring a Scene","text":"<p>After creating a game instance, now we have to add a scene to it. Scenes in Phaser are screens with objects inside of them. A typical game will have multiple scenes with different objects in them.</p> <p>Since we're only making a simple Pong game, we only need to declare one scene and its associated functions.</p> <ol> <li> <p>Insert the <code>scene</code> attribute into the <code>config</code> object, and declare the <code>preload</code>, <code>create</code>, and <code>update</code> functions inside of it: game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    },\n\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: false\n        }\n    }\n}\n\nconst game = new Phaser.Game(config);\n</code></pre></p> <ol> <li>The <code>preload</code> function will preload all assets (e.g. images) for the scene.</li> <li>The <code>create</code> function is where we create the sprites for our game entities (i.e. the player paddles and the ball) and set their properties, like their size and physical interactions.</li> <li>The <code>update</code> function runs every single frame while the game is running. This will be used to constantly check the game state and updating it accordingly, like updating the player's paddle coordinates when they hold down a certain key.</li> </ol> </li> <li> <p>Declare the <code>preload</code>, <code>create</code>, <code>update</code> functions: game.js<pre><code>const game = new Phaser.Game(config);\n\nfunction preload() {\n\n}\n\nfunction create() {\n\n}\n\nfunction update() {\n\n}\n</code></pre></p> </li> </ol> <p>Congratulations! </p> <p>You have now created a basic Phaser app that is now ready to be developed into a simple Pong game.</p> Starter Code game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    },\n\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: false\n        }\n    }\n}\n\nconst game = new Phaser.Game(config);\n\nfunction preload() {\n\n}\n\nfunction create() {\n\n}\n\nfunction update() {\n\n}\n</code></pre>"},{"location":"02-configuring-creating-game-instance/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have learned the following:</p> <ul> <li>How to configure a Phaser game instance</li> <li>How to create a Phaser game instance</li> <li>How to declare a scene and its functions for further development.</li> </ul> <p>Well done! Now you can move onto the next step:</p> <p>Creating Our First Game Objects and Player Characters</p>"},{"location":"03-creating-game-objects/","title":"Pong: Creating Our First Game Objects and Player Characters","text":""},{"location":"03-creating-game-objects/#prerequisites","title":"Prerequisites","text":"<ul> <li>Configured and created a Phaser game instance.</li> </ul>"},{"location":"03-creating-game-objects/#overview","title":"Overview","text":"<p>In this section, we will cover how to preload assets, create game objects, assign them sprites, set their locations, and get them moving.</p>"},{"location":"03-creating-game-objects/#preloading-assets","title":"Preloading Assets","text":"<p>Now that we have our game instance, it's time to add some game assets to give our players something to look at and control.</p> <p>Information</p> <p>The word \"assets\" has many definitions in the real world. In the context of game development, assets mean any digital content used by the video game to communicate information to the user about the state of the game. This can include audio, visual elements and animations.</p>"},{"location":"03-creating-game-objects/#making-our-ball","title":"Making Our Ball","text":"<p> 1. Inside the <code>preload</code> function defined inside of <code>src/game.js</code> add two function calls to <code>this</code> game instance's <code>load.image()</code> method with the following name and path parameter:</p> game.js<pre><code>function preload() {\n    this.load.image('ball', '../assets/images/ball.png') // name, path\n    this.load.image('paddle', 'assets/images/paddle.png') // name, path\n}\n</code></pre> <p>Information</p> <p>This function tells the game instance to pre-load the images we want to use in the game itself. If you had other assets you wanted to load in such as music or animations, you would define them here as well using their respective <code>load</code> methods. </p> <p> 2. Directly above the <code>create()</code> function, define the following variables and one <code>keys</code> object to use inside of our <code>create()</code> and <code>update()</code> functions. These variables are used throughout our examples:</p> game.js<pre><code>let ball;\nlet player1;\nlet player2;\nlet paddleSpeed = 350;\nlet isGameStarted = false;\nlet cursors;\nlet keys = {};\n\nfunction create() {\n};\n</code></pre> <p>Info</p> <p>You might be wondering why we declare <code>keys</code> as an object and <code>cursors</code> as an empty variable. This is because of how Phaser recognizes keys\u2014it treats all your arrow keys as one pre-defined object called <code>cursors</code>, but other keys have to have their purpose defined individually. You'll notice as you continue through these instructions, we use slightly different language when creating our inputs. Make sure to pay attention to the differences as they do not work interchangeably.</p> <p> 3. Inside the <code>create()</code> function, <code>add</code> your first game object: the ball. By calling <code>this</code> game instance's <code>add.sprite</code> method, it adds a sprite (our preloaded image asset) to the ball, and places it in the center of our board. Find the center by dividing <code>this</code> game instance's <code>width</code> and <code>height</code> properties by two and setting those as the X and Y coordinates for the ball: </p> game.js<pre><code>let ball;\n\n    function create() {\n        ball = this.physics.add.sprite( \n        this.physics.world.bounds.width / 2, // x parameter\n        this.physics.world.bounds.height / 2, // y parameter\n        `ball` // sprite parameter\n    )\n};\n</code></pre> <p> 4. Moving to our <code>update()</code> function in the same file, set the initial velocity for our <code>ball</code> to add some behavior to our game object and get it moving:</p> game.js<pre><code>function update() {\n    const initialVelocityX = (Math.random() * 150) + 100;\n    const initialVelocityY = (Math.random() * 150) + 100;\n    ball.setVelocityX(initialVelocityX);\n    ball.setVelocityY(initialVelocityY);\n}\n</code></pre> <p> 5. To ensure the balls location only <code>updates</code> when the game is started, add an <code>if</code> statement that contains all the code inside of our <code>update()</code> function. Inside this <code>if</code> statement, reference our <code>isGameStarted</code> variable:</p> game.js<pre><code>function update() {\n    if (!isGameStarted) {\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n    }\n} \n</code></pre> <p>Warning</p> <p>At this point your ball will have stopped moving. Don't worry! This is intended behavior at the moment as we have not set our <code>isGameStarted</code> variable to <code>true</code>. This means that every time the game calls the <code>update()</code> function, it sees the <code>isGameStarted</code> variable is falsey and skips moving the ball.</p> <p> 6. To ensure the ball starts moving when the game is started, add an <code>if</code> statement that sets <code>isGameStarted</code> to <code>true</code> when the game calls the <code>update()</code> function for the first time: </p> game.js<pre><code>function update() {\n    if (isGameStarted) {\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n        isGameStarted = true;\n    }\n} \n</code></pre> <p> 7. Currently, our <code>ball</code> simply continues in one direction until it dissapears off the edge of the screen. Call the <code>setCollideWorldBounds</code> method on the <code>ball</code> to let the game know this element should detect colliding with the edge of our screen:</p> game.js<pre><code>function create() {\n    ball = this.physics.add.sprite( \n        //... \n    );\n\n    ball.setCollideWorldBounds(true);\n\n};\n</code></pre> <p> 8. Now that the <code>ball</code> is colliding, give it some bounce. Call <code>setBounce</code> on the <code>ball</code> variable to let the game know that when it does collide with something\u2014it should bounce off instead of sticking to it:</p> game.js<pre><code>function create() {\n    ball = this.physics.add.sprite( \n        //... \n    )\n\n    ball.setCollisionWorldBounds(true);\n    ball.setBounce(1, 1);\n\n}\n</code></pre>"},{"location":"03-creating-game-objects/#adding-player-characters-a-tale-of-two-paddles","title":"Adding Player Characters: A Tale of Two Paddles","text":"<ol> <li>Call the <code>this</code> game instance's <code>physics.add.sprite</code> method inside of the <code>create()</code> function. When declaring our players, it's important to remember that we don't want our paddles to be pressed up against the edge of the screen. To do this, offset the paddles <code>x</code> and <code>y</code> parameters as well: </li> </ol> game.js<pre><code>function create() {\n    ball = this.physics.add.sprite( \n        //... \n    )\n\n    ball.setCollisionWorldBounds(true);\n    ball.setBounce(1, 1);\n\n    player1 = this.physics.add.sprite( \n        this.physics.world.bounds.width - (ball.body.width / 2), // x parameter with an offset        \n        this.physics.world.bounds.height / 2, // y parameter with an offset\n        `paddle`\n    )\n\n    player2 = this.physics.add.sprite( \n        ball.body.width / 2 + 1, // x parameter with an offset\n        this.physics.world.bounds.height / 2, // y parameter with an offset\n        `paddle` \n    )\n};\n</code></pre> <p>Danger</p> <p>Notice how in this step, the name of the sprite is not the same as the name of the variable. If your sprites are not rendering, it might be because you used the wrong value for the key of our sprite. While it can be helpful to have your assets share a name with your variables, it can cause confusion in larger projects where you might have to reuse the asset elsewhere.</p> Click To See An Example example.js<pre><code>let paddle;\nlet paddle;\n\nball.setCollisionWorldBounds(true);\nball.setBounce(1, 1);\n\nfunction create() {\n    ball = this.physics.add.sprite( \n        //... \n    )\n\n    paddle = this.physics.add.sprite( \n        this.physics.world.bounds.width - (ball.body.width / 2), // x parameter with an offset        \n        this.physics.world.bounds.height / 2, // y parameter with an offset\n        `paddle`\n    )\n\n    paddle = this.physics.add.sprite( \n        ball.body.width / 2 + 1, // x parameter with an offset\n        this.physics.world.bounds.height / 2, // y parameter with an offset\n        `paddle` \n    )\n};\n</code></pre> <p> 2. Now add collision to the paddles. When adding collision, you have to use separate methods for adding collision between game objects and adding collision between a game object and the world. <code>this.physics.add.collider</code> takes two game objects as inputs and creates collision between those two objects. <code>gameObject.setCollideWorldBounds</code> adds collision between a game object and your screen:</p> game.js<pre><code>function create() {\n     ball = this.physics.add.sprite( \n        //... \n    )\n\n    ball.setCollisionWorldBounds(true);\n    ball.setBounce(1, 1);\n\n    player1 = this.physics.add.sprite( \n        //..\n    )\n\n    player2 = this.physics.add.sprite( \n        //..\n    )\n\n    this.physics.add.collider(ball, player1);\n    this.physics.add.collider(ball, player2);\n\n    player1.setCollideWorldBounds(true);\n    player2.setCollideWorldBounds(true);\n}\n</code></pre> <p> 3. Next, we need to ensure that when the <code>ball</code> makes contact with our paddle, the paddle does not move\u2014they are <code>immovable</code>. Call the <code>setImmovable</code> method on both player objects inside the <code>create()</code> function:</p> game.js<pre><code>function create() {\n     ball = this.physics.add.sprite( \n        //... \n    )\n\n    ball.setCollisionWorldBounds(true);\n    ball.setBounce(1, 1);\n\n    player1 = this.physics.add.sprite( \n        //..\n    )\n\n    player2 = this.physics.add.sprite( \n        //..\n    )\n\n    this.physics.add.collider(ball, player1);\n    this.physics.add.collider(ball, player2);\n\n    player1.setCollideWorldBounds(true);\n    player2.setCollideWorldBounds(true);\n\n    player1.setImmovable(true);\n    player2.setImmovable(true);\n}\n</code></pre>"},{"location":"03-creating-game-objects/#input-and-control","title":"Input and Control","text":"<p> 1. Inside our <code>create()</code> function, call <code>this</code> game instance's <code>input.keyboard.addKey</code> and <code>this.input.keyboard.createCursorKeys</code> to add these keys to our game instance. This lets the game know to watch these keys for events: </p> game.js<pre><code>function create() {\n    //...\n\n    cursors = this.input.keyboard.createCursorKeys();\n    keys.w = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W); \n    //don't worry! This might look intimidating but it simply lets our game\n    //instance know to expect input from the W key\n\n    keys.s = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n}\n</code></pre> <p> 2. Inside our <code>update()</code> function, we are going to tell the game what to do when these <code>cursors</code> or <code>keys</code> are pressed and what to do when they are not. We can do so using <code>if</code> statements wrapped around some behavior for our paddles. In this case, we will make it so that triggering these events causes our paddles to gain or lose velocity. Add the <code>if</code> statements:</p> game.js<pre><code>function update() {\n    //...\n\n    if (cursors.up.isDown) {\n        player1.body.setVelocityY(-paddleSpeed);\n    }\n\n    if (cursors.down.isDown) {\n        player1.body.setVelocityY(paddleSpeed);\n    }\n\n    if (keys.w.isDown) {\n        player2.body.setVelocityY(-paddleSpeed);\n    }\n\n    if (keys.s.isDown) {\n        player2.body.setVelocityY(paddleSpeed);\n    } \n}\n</code></pre> <p>Information</p> <p>You might be wondering what the code means as the wording is odd, <code>cursor.down.isDown</code>? What this actually means is quite simple: <code>isDown</code> in this context means when the key is pressed down. </p> <p>Information</p> <p>You might be wondering why we use negative paddle speeds when moving the paddles up. This is because Phaser perceives all positive velocity Y values to be moving from up to down, so if we want to move down to up, we have to use a negative value. If you wanted to make a game where a character moves left and right, you would have to use the same paradigm for the X axis. </p> <p> 3. Make sure that when a key is not being pressed, the paddles stop. Call the <code>player1</code> and <code>player2</code> <code>setVelocityY</code> methods in the <code>update()</code> function and assign a velocity of <code>0</code> to the paddles:</p> game.js<pre><code>function update() {\n    //...\n\n  player1.body.setVelocityY(0);\n  player2.body.setVelocityY(0);\n\n    if (cursors.up.isDown) {\n        player1.body.setVelocityY(-paddleSpeed);\n    }\n\n    if (cursors.down.isDown) {\n        player1.body.setVelocityY(paddleSpeed);\n    }\n\n        if (keys.w.isDown) {\n        player2.body.setVelocityY(-paddleSpeed);\n    }\n\n    if (keys.s.isDown) {\n        player2.body.setVelocityY(paddleSpeed);\n    } \n}\n</code></pre> <p> 4. Inside our <code>update()</code> function, clamp the balls velocity. Do this by referring to our paddlespeed inside of an <code>if</code> condition, and changing the balls behaviour if it gets too fast or slow. By setting both these traits, we lock the ball into moving at one speed:</p> game.js<pre><code>function update() {\n    //...\n\n    player1.body.setVelocityY(0);\n    player2.body.setVelocityY(0);\n\n    if (cursors.up.isDown) {\n        player1.body.setVelocityY(paddleSpeed);\n    }\n\n    if (cursors.down.isDown) {\n        player1.body.setVelocityY(paddleSpeed);\n    }\n\n    if (ball.body.velocity.y &gt; paddleSpeed) {\n        ball.body.setVelocityY(paddleSpeed);\n    } \n\n     if (ball.body.velocity.y &lt; -paddleSpeed) {\n        ball.body.setVelocityY(-paddleSpeed);\n    } \n}\n</code></pre> <p>Experiment</p> <p>Try playing with the speed of the ball by increasing or decreasing its maximum and minimum velocity. Notice how when the max velocity is higher, it can put the players in unwinnable situations where the paddle moves to slowly to meet the ball. How about when it moves slowly? The game gets easier. By changing these values, we can increase and decrease the difficulty of our game!</p> <p>Success</p> <p>If you have followed along with the tutorial so far, you should currently have a version of Pong that has two controllable paddles using the S and W keys for one player and the Up and Down arrows for the other. </p> Code game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    },\n\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: false\n        }\n    }\n}\n\nconst game = new Phaser.Game(config);\nlet ball;\nlet player1;\nlet player2;\nlet isGameStarted = false;\nlet cursors;\nconst paddleSpeed = 350;\nlet keys = {};\n\nfunction preload() {\n    this.load.image(\"ball\", \"assets/images/ball.png\");\n    this.load.image(\"paddle\", \"assets/images/paddle.png\");\n}\n\nfunction create() {\n    ball = this.physics.add.sprite(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'ball'\n    );\n    ball.setCollideWorldBounds(true);\n\n    ball.setBounce(1, 1);\n\n    player1 = this.physics.add.sprite(\n        this.physics.world.bounds.width - (ball.body.width / 2 + 1),\n        this.physics.world.bounds.height / 2,\n        'paddle'\n    );\n    player1.setImmovable(true);\n    player1.setCollideWorldBounds(true);\n\n    player2 = this.physics.add.sprite(\n        ball.body.width / 2 + 1,\n        this.physics.world.bounds.height / 2,\n        'paddle'\n    );\n\n    player2.setImmovable(true);\n    player2.setCollideWorldBounds(true);\n\n    cursors = this.input.keyboard.createCursorKeys();\n    keys.w = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n    keys.s = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n\n    this.physics.add.collider(ball, player1);\n    this.physics.add.collider(ball, player2);\n}\n\nfunction update() {\n    if (!isGameStarted) {\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n        isGameStarted = true;\n    }\n\n\n    player1.body.setVelocityY(0);\n    player2.body.setVelocityY(0);\n    if (cursors.up.isDown) {\n        player1.body.setVelocityY(-paddleSpeed);\n    }\n    if (cursors.down.isDown) {\n        player1.body.setVelocityY(paddleSpeed);\n    }\n    if (keys.w.isDown) {\n        player2.body.setVelocityY(-paddleSpeed);\n    }\n    if (keys.s.isDown) {\n        player2.body.setVelocityY(paddleSpeed);\n    }\n\n\n    if (ball.body.velocity.y &gt; paddleSpeed) {\n        ball.body.setVelocityY(paddleSpeed);\n    }\n    if (ball.body.velocity.y &lt; -paddleSpeed) {\n        ball.body.setVelocityY(-paddleSpeed);\n    }\n\n}\n</code></pre>"},{"location":"03-creating-game-objects/#conclusion","title":"Conclusion","text":"<p>By the end of this section, you will have learned the following:</p> <ul> <li>How to create game objects</li> <li>How to give game objects collision properties</li> <li>How to create input to control game objects</li> </ul> <p>Well done!  Now you can move onto the next step:</p> <p>Adding Win Conditions, Math Resetting, and Score Systems</p>"},{"location":"04-final-features/","title":"Pong: Adding Win Conditions, Match Resetting, and Scoring System","text":""},{"location":"04-final-features/#prerequisites","title":"Prerequisites","text":"<ul> <li>Created the player paddles and ball inside of the Phaser scene, and coded their corresponding behaviours/logic.</li> </ul>"},{"location":"04-final-features/#overview","title":"Overview","text":"<p>In this final section of creating Pong in Phaser, we will walk through implementing the final features of the game:</p> <ul> <li>Create a win condition and show a victory screen when a player wins the match.</li> <li>The ability to reset the game after a match has finished.</li> <li>Keep track of player scores.</li> </ul>"},{"location":"04-final-features/#create-a-win-condition","title":"Create a Win Condition","text":"<p>The game in its current state does not properly track if any player has won the match; the ball will simply bounce off the edges of the screen. These instructions will guide you in implementing a win condition, which is met when the ball hits the wall on either player's side.</p> <ol> <li> <p>Declare the variables <code>p1victoryText</code> and <code>p2victoryText</code> in global scope: game.js<pre><code>//...\n\nconst game = new Phaser.Game(config);\nlet ball;\nlet player1;\nlet player2;\nlet isGameStarted = false;\nlet cursors;\nconst paddleSpeed = 350;\nlet keys = {};\nlet p1victoryText;\nlet p2victoryText;\n\n//...\n</code></pre></p> </li> <li> <p>At the bottom of the <code>create()</code> function, define <code>p1victoryText</code> and <code>p2victoryText</code> as text added to the screen: game.js<pre><code>function create() {\n    //...\n\n    this.physics.add.collider(ball, player1);\n    this.physics.add.collider(ball, player2);\n\n    p1victoryText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'Player 1 wins!'\n    );\n    p1victoryText.setVisible(false);\n    p1victoryText.setOrigin(0.5);\n\n    p2victoryText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'Player 2 wins!'\n    );\n    p2victoryText.setVisible(false);\n    p2victoryText.setOrigin(0.5);\n}\n</code></pre></p> </li> <li> <p>In the <code>update()</code> function, add the following checks to see which player has won, as well as make the correct victory text appear: game.js<pre><code>function update() {\n    if (!isGameStarted) {\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n        isGameStarted = true;\n    }\n\n    if (ball.body.x &gt; player1.body.x) {\n        p2victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x) {\n        p1victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    //...\n}\n</code></pre></p> <ol> <li>The <code>if (ball.body.x ...)</code> conditionals checks if the ball's X coordinate has gone beyond a player's paddle, which determines which player lost the match.</li> <li><code>p1victoryText</code> and <code>p2victoryText</code> are set to visible depending on who lost the match.</li> <li>The velocity of the ball is set to 0 for both the X and Y coordinates. This freezes the ball in place when the win condition is met.</li> </ol> </li> </ol> <p>Proper Win Condition</p> <p>You should now see victory text appear in the middle of the screen when a player wins the match.</p> <p></p> <p>Note</p> <p>Player 2 in this case is actually the player on the left side, and Player 1 is on the right.</p>"},{"location":"04-final-features/#match-resetting","title":"Match Resetting","text":"<p>Currently, when a player wins a match, the victory screen will appear, but it will stay stuck in that state with no way to reset. The only way to play another match in this case is to refresh the web page.</p> <p>Having to refresh the page every time we want to play another round of Pong can get annoying. The following instructions will walk you through implementing a reset feature, where we can easily start a new match after one has ended by pressing Spacebar.</p> <ol> <li>In the <code>create()</code> function, add the Spacebar as a valid key in the game: game.js<pre><code>function create() {\n    //...\n\n    cursors = this.input.keyboard.createCursorKeys();\n    keys.w = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n    keys.s = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n    keys.space = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n\n    //...\n}\n</code></pre></li> <li> <p>In the <code>update()</code> function, add the following code under the <code>if (!isGameStarted)</code> conditional: game.js<pre><code>function update() {\n    if (!isGameStarted) {\n        ball.body.x = this.physics.world.bounds.width / 2;\n        ball.body.y = this.physics.world.bounds.height / 2;\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n        isGameStarted = true;\n    }\n\n    //...\n}\n</code></pre></p> <ol> <li>This puts the ball back in the center of the game screen when the match is restarted.</li> </ol> </li> <li> <p>In the <code>update()</code> function, add a conditional that will reset the game when the match has ended and if the Spacebar is pressed: game.js<pre><code>function update() {\n    if (!isGameStarted) {\n        ball.body.x = this.physics.world.bounds.width / 2;\n        ball.body.y = this.physics.world.bounds.height / 2;\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n        isGameStarted = true;\n    }\n\n    if (ball.body.x &gt; player1.body.x) {\n        p2victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x) {\n        p1victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x || ball.body.x &gt; player1.body.x) {\n        if (keys.space.isDown) {\n            isGameStarted = false;\n            p1victoryText.setVisible(false);\n            p2victoryText.setVisible(false);\n        }\n    }\n\n    //...\n}\n</code></pre></p> <ol> <li>The <code>if (... || ...)</code> conditional checks if either player has won the match. Only if this is true is when the game checks if the Spacebar was pressed.</li> <li>Setting the <code>isGameStarted</code> boolean back to false will put the game in the same state when it is first launched.</li> </ol> </li> </ol>"},{"location":"04-final-features/#scoring-system","title":"Scoring System","text":"<p>Now that the game properly checks who won a match and matches can be reset by pressing Spacebar, the only thing that is left is to create a scoring system.</p> <ol> <li> <p>Declare the variables that will be used to track and display the score in global scope: game.js<pre><code>const game = new Phaser.Game(config);\nlet ball;\nlet player1;\nlet player2;\nlet isGameStarted = false;\nlet cursors;\nconst paddleSpeed = 350;\nlet keys = {};\nlet p1victoryText;\nlet p2victoryText;\nlet scoreAdded = false;\nlet scoreText;\nlet p1Score = 0;\nlet p2Score = 0;\n</code></pre></p> </li> <li> <p>In the <code>create()</code> function, define <code>scoreText</code> as text added to the screen: game.js<pre><code>function create() {\n    //...\n\n    p1victoryText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'Player 1 wins!'\n    );\n    p1victoryText.setVisible(false);\n    p1victoryText.setOrigin(0.5);\n\n    p2victoryText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'Player 2 wins!'\n    );\n    p2victoryText.setVisible(false);\n    p2victoryText.setOrigin(0.5);\n\n    scoreText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        30,\n        `${p2Score} : ${p1Score}`\n    );\n    scoreText.setOrigin(0.5);\n}\n</code></pre></p> </li> <li> <p>In the <code>update()</code> function, add logic which will increment the player's score in both win condition checks: game.js<pre><code>function update() {\n    if (!isGameStarted) {\n        ball.body.x = this.physics.world.bounds.width / 2;\n        ball.body.y = this.physics.world.bounds.height / 2;\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n        isGameStarted = true;\n    }\n\n    if (ball.body.x &gt; player1.body.x) {\n        if (!scoreAdded) {\n            p2Score++;\n            scoreAdded = true;\n        }\n        p2victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x) {\n        if (!scoreAdded) {\n            p1Score++;\n            scoreAdded = true;\n        }\n        p1victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    //...\n}\n</code></pre></p> <p>Why have the <code>scoreAdded</code> boolean?</p> <p>The extra check for <code>scoreAdded</code> is necessary because Phaser calls the <code>update()</code> function on every frame that the game renders. If this extra check isn't done, the <code>p1Score</code> and <code>p2Score</code> variables will increment by one on every single frame instead of only when the player scores.</p> <p>So if the game runs at 60 frames per second, then <code>p1score</code> and <code>p2score</code> would end up incrementing by one 60 times a second, which is not what we want.</p> </li> <li> <p>In the <code>update()</code> function, set the <code>scoreAdded</code> boolean to <code>false</code> when the game is reset with Spacebar: game.js<pre><code>function update() {\n    if (ball.body.x &gt; player1.body.x) {\n        if (!scoreAdded) {\n            p2Score++;\n            scoreAdded = true;\n        }\n        p2victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x) {\n        if (!scoreAdded) {\n            p1Score++;\n            scoreAdded = true;\n        }\n        p1victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x || ball.body.x &gt; player1.body.x) {\n        if (keys.space.isDown) {\n            isGameStarted = false;\n            scoreAdded = false;\n            p1victoryText.setVisible(false);\n            p2victoryText.setVisible(false);\n        }\n    }\n\n    //...\n}\n</code></pre></p> </li> <li> <p>In the <code>update()</code> function, set the scores on the game screen to match the players' current scores: game.js<pre><code>function update() {\n    if (ball.body.x &lt; player2.body.x || ball.body.x &gt; player1.body.x) {\n        if (keys.space.isDown) {\n            isGameStarted = false;\n            scoreAdded = false;\n            p1victoryText.setVisible(false);\n            p2victoryText.setVisible(false);\n        }\n    }\n\n    scoreText.setText(`${p2Score} : ${p1Score}`)\n\n    //...\n}\n</code></pre></p> </li> </ol> <p>Completed Phaser Game</p> <p>Congratulations! You have successfully created a simple Pong game using Phaser 3.</p> <p>The full working code is available below to reference if you experienced any issues while going through the instructions.</p> Final Code game.js<pre><code>const config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: 800,\n    height: 640,\n\n    scale: {\n        mode: Phaser.Scale.RESIZE,\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n\n    scene: {\n        preload,\n        create,\n        update\n    },\n\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: false\n        }\n    }\n}\n\nconst game = new Phaser.Game(config);\nlet ball;\nlet player1;\nlet player2;\nlet isGameStarted = false;\nlet cursors;\nconst paddleSpeed = 350;\nlet keys = {};\nlet p1victoryText;\nlet p2victoryText;\nlet scoreAdded = false;\nlet p1Score = 0;\nlet p2Score = 0;\n\nfunction preload() {\n    this.load.image(\"ball\", \"assets/images/ball.png\");\n    this.load.image(\"paddle\", \"assets/images/paddle.png\");\n}\n\nfunction create() {\n    ball = this.physics.add.sprite(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'ball'\n    );\n    ball.setCollideWorldBounds(true);\n\n    ball.setBounce(1, 1);\n\n    player1 = this.physics.add.sprite(\n        this.physics.world.bounds.width - (ball.body.width / 2 + 1),\n        this.physics.world.bounds.height / 2,\n        'paddle'\n    );\n    player1.setImmovable(true);\n    player1.setCollideWorldBounds(true);\n\n    player2 = this.physics.add.sprite(\n        ball.body.width / 2 + 1,\n        this.physics.world.bounds.height / 2,\n        'paddle'\n    );\n    player2.setImmovable(true);\n    player2.setCollideWorldBounds(true);\n\n    cursors = this.input.keyboard.createCursorKeys();\n    keys.w = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n    keys.s = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n    keys.space = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\n\n    this.physics.add.collider(ball, player1);\n    this.physics.add.collider(ball, player2);\n\n    p1victoryText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'Player 1 wins!'\n    );\n    p1victoryText.setVisible(false);\n    p1victoryText.setOrigin(0.5);\n\n    p2victoryText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        this.physics.world.bounds.height / 2,\n        'Player 2 wins!'\n    );\n    p2victoryText.setVisible(false);\n    p2victoryText.setOrigin(0.5);\n\n    scoreText = this.add.text(\n        this.physics.world.bounds.width / 2,\n        30,\n        `${p2Score} : ${p1Score}`\n    );\n    scoreText.setOrigin(0.5);\n}\n\nfunction update() {\n    if (!isGameStarted) {\n        ball.body.x = this.physics.world.bounds.width / 2;\n        ball.body.y = this.physics.world.bounds.height / 2;\n        const initialVelocityX = (Math.random() * 150) + 100;\n        const initialVelocityY = (Math.random() * 150) + 100;\n        ball.setVelocityX(initialVelocityX);\n        ball.setVelocityY(initialVelocityY);\n        isGameStarted = true;\n    }\n\n    if (ball.body.x &gt; player1.body.x) {\n        if (!scoreAdded) {\n            p2Score++;\n            scoreAdded = true;\n        }\n        p2victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x) {\n        if (!scoreAdded) {\n            p1Score++;\n            scoreAdded = true;\n        }\n        p1victoryText.setVisible(true);\n        ball.body.setVelocityX(0);\n        ball.body.setVelocityY(0);\n    }\n\n    if (ball.body.x &lt; player2.body.x || ball.body.x &gt; player1.body.x) {\n        if (keys.space.isDown) {\n            isGameStarted = false;\n            scoreAdded = false;\n            p1victoryText.setVisible(false);\n            p2victoryText.setVisible(false);\n        }\n    }\n\n    scoreText.setText(`${p2Score} : ${p1Score}`);\n\n\n    player1.body.setVelocityY(0);\n    player2.body.setVelocityY(0);\n    if (cursors.up.isDown) {\n        player1.body.setVelocityY(-paddleSpeed);\n    }\n    if (cursors.down.isDown) {\n        player1.body.setVelocityY(paddleSpeed);\n    }\n    if (keys.w.isDown) {\n        player2.body.setVelocityY(-paddleSpeed);\n    }\n    if (keys.s.isDown) {\n        player2.body.setVelocityY(paddleSpeed);\n    }\n\n\n    if (ball.body.velocity.y &gt; paddleSpeed) {\n        ball.body.setVelocityY(paddleSpeed);\n    }\n    if (ball.body.velocity.y &lt; -paddleSpeed) {\n        ball.body.setVelocityY(-paddleSpeed);\n    }\n\n}\n</code></pre>"},{"location":"04-final-features/#conclusion","title":"Conclusion","text":"<p>At the end of this section, you will have learned the following:</p> <ul> <li>Creating a win condition by adding conditionals inside of the <code>update()</code> function.</li> <li>Adding and displaying <code>text</code> objects to the game screen.</li> <li>Resetting the game's state through a keybind (i.e. Spacebar).</li> <li>Tracking scores and displaying them on the screen.</li> </ul> <p>Well done! You have completed all of the parts of creating Pong using the Phaser 3 library! </p>"},{"location":"glossary/","title":"Glossary","text":"Term Description Sprites Images that visually represent objects in the game. Assets All media used to create the game, including music, images, and animations. Velocity Speed of an object in a particular direction. Clipping / Clip out of bounds When an object moves outside the intended visible area, often due to improper boundary handling. worldBounds The defined limits of the game world that restrict how far objects can move. Key Events Actions triggered when a player presses or releases a key on the keyboard, often used for controlling movement or interactions. Coordinates (X and Y) A pair of values representing an object's position in a 2D space, where <code>X</code> is the horizontal axis and <code>Y</code> is the vertical axis."},{"location":"troubleshooting/","title":"Troubleshooting","text":"Symptoms Probable Cause Action Blank White Web Page The HTML parent element that Phaser is looking to hook the game onto is missing. Check that <code>&lt;div id=\"game\"&gt;</code> element exists inside of the body of the <code>index.html</code> file. The HTML parent element's ID does not match with the parent ID given in the Phaser <code>config</code> object. Make sure that the id of your <code>&lt;div&gt;</code> matches with the <code>parent</code> attribute set inside of the <code>config</code> object in <code>game.js</code>. Wrong letter casing when accessing attributes from the Phaser Object Make sure that any attribute that you're accessing on the <code>Phaser</code> object (i.e. <code>Phaser.AttributeName</code>) matches the case inside of the instructions. Syntax errors Open Developer Tools (press F12 or Right-click and select Inspect) and open the Console. JavaScript errors will be displayed there. Web page not displaying at <code>localhost:XXXX</code> The live server is not running. Press the Go Live button at the bottom right of the VS Code window to start the live server. The port number in the URL is incorrect. Ensure that the port number in the URL matches the Live Server port at the bottom right of the VS Code window. Paddle/Ball images not visible The file path to the image assets is incorrect. Make sure that the file path in the <code>this.load.image(...)</code> methods in the <code>preload()</code> function match with the path for the image assets. Paddle/Ball go offscreen Collision with world bounds was not set for the game objects. Make sure that <code>setCollideWorldBounds(true)</code> is called for the <code>ball</code>, <code>player1</code>, and <code>player2</code> objects. Paddles get thrown off course when hit by the ball The <code>setImmovable()</code> property of the player paddles was not set to <code>true</code>. Make sure that <code>player1.setImmovable(true)</code> and <code>player2.setImmovable(true)</code> is called inside the <code>create()</code> function. Ball goes through player paddles The physics collider was not set between the ball and the player paddles. Check if <code>this.physics.add.collider</code> was set between the ball and each player paddle (e.g. <code>this.physics.add.collider(ball, player1)</code>)"}]}